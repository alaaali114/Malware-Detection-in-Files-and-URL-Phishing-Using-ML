from login import Ui_Form  
from NewWork import Ui_MainWindow
from wrong_message import Ui_Dialog
from PySide6.QtWidgets import QMainWindow
import mysql.connector
import re

class check_credentials(QMainWindow, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.check_credentials)
        

    def check_credentials(self):

        mydb=mysql.connector.connect(host="localhost",user="root",password="", database="deskmalware")
        cursor=mydb.cursor()
        email=self.lineEdit.text()
        password=self.lineEdit_2.text() 
        cursor.execute("SELECT Account,password,user_name FROM user WHERE (Account = %s or user_name = %s)  and password =%s ", (email,email,password,))
        if(cursor.fetchone()) :
            self.main_window = project(email,password)
            self.main_window.setupUi(self.main_window)
            self.main_window.set_email()
            self.main_window.email_edit_btn.clicked.connect(self.main_window.edit_email)
            self.main_window.pass_edit_btn.clicked.connect(self.main_window.edit_password)
            self.main_window.show()
            self.close()
        else:
            self.wrongMessage = message()
            self.wrongMessage.setupUi(self.wrongMessage)
            self.wrongMessage.show()
        
        mydb.close()
            
        
class project(QMainWindow, Ui_MainWindow):
    def __init__(self, email, password):
        super().__init__()
        self.setFixedSize(1000, 500)
        self.email = email  
        self.password = password  
        self.setupUi(self)
        
    
    def set_email(self):
        self.lineEdit_email.setText(self.email)
    
    def edit_email(self):
        try:
            if(self.validate_email(self.lineEdit_email.text())):
                mydb=mysql.connector.connect(host="localhost",user="root",password="", database="deskmalware")
                cursor=mydb.cursor()
                cursor.execute("UPDATE user SET Account = %s WHERE Account= %s ", (self.lineEdit_email.text(),self.email,))
                mydb.commit()
                if(cursor.rowcount > 0) :
                    print("Email Edited Successfully")
                    self.email=self.lineEdit_email.text()
                else:
                    print("Try Again Later")
                mydb.close()
            else:
                print("enter a valid format for email")
        except mysql.connector.Error as e:
            print("Check Your Connection")

    def edit_password(self):
        try:
            if(self.validate_password(self.lineEdit_pass.text())):
                mydb=mysql.connector.connect(host="localhost",user="root",password="", database="deskmalware")
                cursor=mydb.cursor()
                cursor.execute("select password FROM user where Account= %s",(self.email,))
                old_password=cursor.fetchone()

                for i in old_password:
                    filtered_old_password=''
                    if i=="(" or i=="'" or i==")" or i==",":
                        pass
                    else:
                        filtered_old_password+=i

                if(self.lineEdit_pass_conf.text() == self.lineEdit_pass.text() and filtered_old_password == self.lineEdit_old_pass.text()):
                    cursor.execute("UPDATE user SET password = %s where Account= %s ", (self.lineEdit_pass.text(),self.email,))
                    mydb.commit()
                    if(cursor.rowcount > 0) :
                        print("Password Edited Successfully")
                        self.password=self.lineEdit_pass.text()
                    else:
                        print("something went wrong")

                    mydb.close()
                else:
                    print("invalid please try again")
            else:
                print("Type Stronger Password it should contain at least a number ,upper case letter , lower case letter and special character")
        except mysql.connector.Error as e:
            print("Check Your Connection")


    def validate_email(self,email):
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        
        if re.match(pattern, email):
            return True
        else:
            return False
        

    def validate_password(self,password):
    # Check length
        if len(password) < 8:
            return False
        
        # Check for at least one uppercase letter
        if not any(char.isupper() for char in password):
            return False
        
        # Check for at least one lowercase letter
        if not any(char.islower() for char in password):
            return False
        
        # Check for at least one digit
        if not any(char.isdigit() for char in password):
            return False
        
        # Check for at least one special character
        special_characters = "!@#$%^&*()-+_"
        if not any(char in special_characters for char in password):
            return False
        
        return True
        



class message(QMainWindow,Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        