from login import Ui_Form  
from NewWork import Ui_MainWindow
from wrong_message import Ui_Dialog
from PySide6.QtWidgets import QMainWindow
import mysql.connector
import re
from machineConnection.machine import *
from PySide6.QtCore import QRect ,QSize
from PySide6.QtWidgets import QLabel,QPushButton
from PySide6.QtGui import QPixmap, QIcon
from url_predict import * 
from hashing.hash import verify_password_with_php
import subprocess
import webbrowser

class check_credentials(QMainWindow, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.check_credentials)
        self.commandLinkButton_2.clicked.connect(self.register_link)
        
    
    def register_link(self):
        webbrowser.open("http://localhost/project/P_Register.php")
        
    
    def check_credentials(self):
        try:
            mydb=mysql.connector.connect(host="localhost",user="root",password="", database="deskmalware")
            cursor=mydb.cursor()
            email=self.lineEdit.text()
            password=self.lineEdit_2.text() 
            cursor.execute("SELECT password FROM user WHERE Account = %s ", (email,))
            hashed_password= cursor.fetchone()
            if (hashed_password):
                for i in hashed_password:
                    filtered_hash_password=''
                    if i=="(" or i=="'" or i==")" or i==",":
                        pass
                    else:
                        filtered_hash_password+=i      
                        
                valid=verify_password_with_php(password,filtered_hash_password)
                if (valid):
                    self.main_window = project(email,password)
                    self.main_window.setupUi(self.main_window)
                    self.main_window.set_email()
                    self.main_window.email_edit_btn.clicked.connect(self.main_window.edit_email)
                    self.main_window.pass_edit_btn.clicked.connect(self.main_window.edit_password)
                    #connection betwenn Machine and the GUI for files
                    self.main_window.pushButton_2.clicked.connect(self.main_window.file_detection)
                    self.main_window.pushButton_3.clicked.connect(self.main_window.Url_detection)
                    
                    self.main_window.stackedWidget.setCurrentIndex(0)
                    # self.main_window.pushButton_2.setCheckable(True) 
                    # self.main_window.tabWidget.setCurrentIndex(0)
                    #####
                    #####
                    self.main_window.show()
                    self.close()
                else:
                    self.wrongMessage = message()
                    self.wrongMessage.setupUi(self.wrongMessage)
                    self.wrongMessage.show()
            else:
                self.wrongMessage = message()
                self.wrongMessage.setupUi(self.wrongMessage)
                self.wrongMessage.show()
            mydb.close()
        except:
            self.temp_01 = intern_connection_Ui_Dialog_message()
            self.temp_01.setupUi(self.temp_01)
            self.temp_01.show()
            

class project(QMainWindow, Ui_MainWindow):
    def __init__(self, email, password):
        super().__init__()
        self.setFixedSize(1000, 500)
        self.email = email  
        self.password = password  
        self.setupUi(self)
        

    def convert_slashes(self,path):
        return path.replace('/', '\\')



    def set_email(self):
        self.lineEdit_email.setText(self.email)
    
    def edit_email(self):
        try:
            if(self.validate_email(self.lineEdit_email.text())):
                mydb=mysql.connector.connect(host="localhost",user="root",password="", database="deskmalware")
                cursor=mydb.cursor()
                cursor.execute("UPDATE user SET Account = %s WHERE Account= %s ", (self.lineEdit_email.text(),self.email,))
                mydb.commit()
                if(cursor.rowcount > 0) :
                    print("Email Edited Successfully")
                    self.temp_01 = edit_email_success_Ui_Dialog_message()
                    self.temp_01.setupUi(self.temp_01)
                    self.temp_01.show()
                    self.email=self.lineEdit_email.text()
                else:
                    print("Try Again Later")
                    self.temp_01 = edit_email_fail_Ui_Dialog_message()
                    self.temp_01.setupUi(self.temp_01)
                    self.temp_01.show()
                mydb.close()
            else:
                self.temp_01 = validate_email_Ui_Dialog_message()
                self.temp_01.setupUi(self.temp_01)
                self.temp_01.show()
                print("enter a valid format for email")
        except mysql.connector.Error as e:
            self.temp_01 = intern_connection_Ui_Dialog_message()
            self.temp_01.setupUi(self.temp_01)
            self.temp_01.show()
            print("Check Your Connection")

    def edit_password(self):
        try:
            mydb=mysql.connector.connect(host="localhost",user="root",password="", database="deskmalware")
            cursor=mydb.cursor()
            cursor.execute("select password FROM user where Account= %s",(self.email,))
            old_password=cursor.fetchone()
            if (old_password):
                for i in old_password:
                    filtered_old_password=''
                    if i=="(" or i=="'" or i==")" or i==",":
                        pass
                    else:
                        filtered_old_password+=i      
                print(filtered_old_password)          
                if(filtered_old_password == self.lineEdit_old_pass.text() ):
                    if(self.lineEdit_pass_conf.text() == self.lineEdit_pass.text()):
                        if(self.validate_password(self.lineEdit_pass.text())):
                            cursor.execute("UPDATE user SET password = %s where Account= %s ", (self.lineEdit_pass.text(),self.email,))
                            mydb.commit()
                            if(cursor.rowcount > 0) :
                                print("Password Edited Successfully")
                                self.temp_01 = edit_pass_success_Ui_Dialog_message()
                                self.temp_01.setupUi(self.temp_01)
                                self.temp_01.show()
                                self.password=self.lineEdit_pass.text()
                            else:
                                self.temp_01 = edit_pass_fail_Ui_Dialog_message()
                                self.temp_01.setupUi(self.temp_01)
                                self.temp_01.show()
                                print("something went wrong")
                            mydb.close()
                        else:
                            self.temp_01 = validate_pass_Ui_Dialog_message()
                            self.temp_01.setupUi(self.temp_01)
                            self.temp_01.show()
                            print("Type Stronger Password it should contain at least a number ,upper case letter , lower case letter and special character")
                    else:
                            self.temp_01 = confirm_pass_Ui_Dialog_message()
                            self.temp_01.setupUi(self.temp_01)
                            self.temp_01.show()
                            print("Please confirm password correctly")
                else:
                    self.temp_01 = match_old_pass_Ui_Dialog_message()
                    self.temp_01.setupUi(self.temp_01)
                    self.temp_01.show()
                    print("Old password is not correct")
            else:
                self.temp_01 = match_old_pass_Ui_Dialog_message()
                self.temp_01.setupUi(self.temp_01)
                self.temp_01.show()
        except mysql.connector.Error as e:
            self.temp_01 = intern_connection_Ui_Dialog_message()
            self.temp_01.setupUi(self.temp_01)
            self.temp_01.show()
            print("Check Your Internet Connection", e)

    def file_detection(self):
        if hasattr(self, 'lineEdit_3_1'):  
            self.lineEdit_3_1.deleteLater()  
            del self.lineEdit_3_1
            self.WrongIcon.deleteLater()  
            del self.WrongIcon
        
        # self.maleware_detect=FileDetection()
        if (predict_label(self.file_path)==1):
            self.tabWidget.setCurrentIndex(2)
            self.lineEdit_3_1 = QLabel(self.tab_3)
            self.lineEdit_3_1.setObjectName(u"lineEdit_3_1")
            self.lineEdit_3_1.setStyleSheet("QLabel { font-size: 16px; color: red; }")
            self.lineEdit_3_1.setGeometry(QRect(350, 170, 300, 23))
            self.lineEdit_3_1.show()
            #### icon ####
            self.WrongIcon = QLabel(self.tab_3)
            self.WrongIcon.setObjectName("WrongIcon")
            self.WrongIcon.setGeometry(QRect(370, 75, 300, 70))  
            pixmap = QPixmap("img/icons8-close-96.png") 
            self.WrongIcon.setPixmap(pixmap)
            self.WrongIcon.show()
            ##### end of Icon #####
            self.lineEdit_3_1.setText("The file is Malicious")
        elif (predict_label(self.file_path)==0):
            self.tabWidget.setCurrentIndex(2)
            self.lineEdit_3_1 = QLabel(self.tab_3)
            self.lineEdit_3_1.setObjectName(u"lineEdit_3_1")
            self.lineEdit_3_1.setStyleSheet("QLabel { font-size: 16px; color: green; }")
            self.lineEdit_3_1.setGeometry(QRect(366, 170, 300, 23))
            self.lineEdit_3_1.setText("The file is Safe")
            self.lineEdit_3_1.show()
            #### icon ####
            self.WrongIcon = QLabel(self.tab_3)
            self.WrongIcon.setObjectName("WrongIcon")
            self.WrongIcon.setGeometry(QRect(370, 75, 300, 70))  
            pixmap = QPixmap("img/icons8-correct-96.png") 
            self.WrongIcon.setPixmap(pixmap)
            self.WrongIcon.show()
            ##### end of Icon #####
        elif(predict_label(self.file_path)==2):
            self.temp_01 = Ui_Dialog_Wrong_format_check()
            self.temp_01.setupUi(self.temp_01)
            self.temp_01.show()
        elif(predict_label(self.file_path)==3):
            self.temp_01 = Ui_Dialog_error_3_check()
            self.temp_01.setupUi(self.temp_01)
            self.temp_01.show()
        
    def Url_detection(self):
        if hasattr(self, 'lineEdit_3_1'):  
            self.lineEdit_3_1.deleteLater()  
            del self.lineEdit_3_1
            self.WrongIcon.deleteLater()  
            del self.WrongIcon

        if(len(self.lineEdit_2.text())<11):
            self.temp_01 = Ui_Dialog_url_check()
            self.temp_01.setupUi(self.temp_01)
            self.temp_01.show()
        else:
            if (extract_features(self.lineEdit_2.text())):
                self.tabWidget.setCurrentIndex(2)
                self.lineEdit_3_1 = QLabel(self.tab_3)
                self.lineEdit_3_1.setObjectName(u"lineEdit_3_1")
                self.lineEdit_3_1.setStyleSheet("QLabel { font-size: 16px; color: red; }")
                self.lineEdit_3_1.setGeometry(QRect(358, 170, 300, 23))
                self.lineEdit_3_1.show()
                #### icon ####
                self.WrongIcon = QLabel(self.tab_3)
                self.WrongIcon.setObjectName("WrongIcon")
                self.WrongIcon.setGeometry(QRect(370, 75, 300, 70))  
                pixmap = QPixmap("img/icons8-close-96.png") 
                self.WrongIcon.setPixmap(pixmap)
                self.WrongIcon.show()
                ##### end of Icon #####
                self.lineEdit_3_1.setText("Malicious website")
            else:
                self.tabWidget.setCurrentIndex(2)
                self.lineEdit_3_1 = QLabel(self.tab_3)
                self.lineEdit_3_1.setObjectName(u"lineEdit_3_1")
                self.lineEdit_3_1.setStyleSheet("QLabel { font-size: 16px; color: green; }")
                self.lineEdit_3_1.setGeometry(QRect(369, 170, 300, 23))
                self.lineEdit_3_1.setText("Safe website")
                self.lineEdit_3_1.show()
                #### icon ####
                self.WrongIcon = QLabel(self.tab_3)
                self.WrongIcon.setObjectName("WrongIcon")
                self.WrongIcon.setGeometry(QRect(370, 75, 300, 70))  
                pixmap = QPixmap("img/icons8-correct-96.png") 
                self.WrongIcon.setPixmap(pixmap)
                self.WrongIcon.show()
                ##### end of Icon #####

    def validate_email(self,email):
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        
        if re.match(pattern, email):
            return True
        else:
            return False
        

    def validate_password(self,password):
    # Check length
        if len(password) < 8:
            return False
        
        # Check for at least one uppercase letter
        if not any(char.isupper() for char in password):
            return False
        
        # Check for at least one lowercase letter
        if not any(char.islower() for char in password):
            return False
        
        # Check for at least one digit
        if not any(char.isdigit() for char in password):
            return False
        
        # Check for at least one special character
        special_characters = "!@#$%^&*()-+_"
        if not any(char in special_characters for char in password):
            return False
        
        return True
        



class message(QMainWindow,Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        

from messages.confirm_pass_message import confirm_pass_Ui_Dialog
from messages.edit_email_fail_message import edit_email_fail_Ui_Dialog
from messages.edit_email_success_message import edit_email_success_Ui_Dialog
from messages.edit_pass_success_message import edit_pass_success_Ui_Dialog
from messages.edit_pass_fail_message import edit_pass_fail_Ui_Dialog
from messages.internet_connection_message import intern_connection_Ui_Dialog
from messages.match_old_pass_message import match_old_pass_Ui_Dialog
from messages.validate_email_message import validate_email_Ui_Dialog
from messages.validate_pass_message import validate_pass_Ui_Dialog

class confirm_pass_Ui_Dialog_message(QMainWindow,confirm_pass_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

class edit_email_fail_Ui_Dialog_message(QMainWindow,edit_email_fail_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class edit_email_success_Ui_Dialog_message(QMainWindow,edit_email_success_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class edit_pass_success_Ui_Dialog_message(QMainWindow,edit_pass_success_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class edit_pass_fail_Ui_Dialog_message(QMainWindow,edit_pass_fail_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class intern_connection_Ui_Dialog_message(QMainWindow,intern_connection_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class match_old_pass_Ui_Dialog_message(QMainWindow,match_old_pass_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class validate_email_Ui_Dialog_message(QMainWindow,validate_email_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class validate_pass_Ui_Dialog_message(QMainWindow,validate_pass_Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

from messages.machineErrors.unsupported_format import Ui_Dialog_Wrong_format
from messages.machineErrors.Error_occurred3 import Ui_Dialog_error_3
from messages.machineErrors.validate_url import Ui_Dialog_validate_url

class Ui_Dialog_Wrong_format_check(QMainWindow,Ui_Dialog_Wrong_format):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        
class Ui_Dialog_error_3_check(QMainWindow,Ui_Dialog_error_3):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

class Ui_Dialog_url_check(QMainWindow,Ui_Dialog_validate_url):
    def __init__(self):
        super().__init__()
        self.setupUi(self)